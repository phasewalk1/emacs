#+TITLE: phasewalk1 GNU Emacs Config
#+AUTHOR: phasewalk1
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table Of Contents :toc:
- [[#important-programs-to-load-first][Important Programs to Load First]]
  - [[#package-manager-elpaca][Package Manager (Elpaca)]]
  - [[#vim-emulation-layer-evil-mode][Vim Emulation Layer (Evil Mode)]]
- [[#keybinds-w-general][Keybinds w/ General]]
- [[#dude-wheres-my-keybind-which-key][Dude, Where's My Keybind? (Which-Key)]]
- [[#gui-tweaks][GUI Tweaks]]
  - [[#fonts][Fonts]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars, and Scrollbars]]
  - [[#enable-line-numbers-and-truncated-lines][Enable Line Numbers and Truncated Lines]]
  - [[#all-the-icons][All The Icons]]
  - [[#render-hex-colors-inline][Render Hex Colors Inline]]
  - [[#theming][Theming]]
- [[#ivy-and-counsel][Ivy and Counsel]]
- [[#org-mode][Org Mode]]
  - [[#table-of-contents][Table of Contents]]
  - [[#org-bullets][Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#enable-org-tempo][Enable Org Tempo]]

* Important Programs to Load First
** Package Manager (Elpaca)

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.6)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

** Vim Emulation Layer (Evil Mode)
#+begin_src emacs-lisp
  (elpaca elpaca-use-package
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t))
  (elpaca-wait)

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor)

  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))
#+end_src

* Keybinds w/ General

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)
    (general-create-definer phasewalk1/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC")

    ;; lines
    (phasewalk1/leader-keys
      "TAB TAB" '(comment-line :wk "Comment lines"))

    ;; helpers
    (phasewalk1/leader-keys
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable")
      "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Open Emacs config")
      "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload Emacs config"))
  
    ;; files
    (phasewalk1/leader-keys
      "." '(find-file :wk "Find file")
      "f r" '(counsel-recentf :wk "Find recent files"))

    ;; buffers
    (phasewalk1/leader-keys
      "b" '(:ignore t :wk "buffer")
      "bb" '(switch-to-buffer :wk "Switch buffer")
      "bk" '(kill-this-buffer :wk "Kill this buffer")
      "bp" '(previous-buffer :wk "Previous buffer"))

    ;; toggle
    (phasewalk1/leader-keys
      "t t" '(visual-line-mode :wk "Toggle truncated lines"))

    ;; eval
    (phasewalk1/leader-keys
      "e" '(:ignore t :wk "Evaluate")
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun")))
#+end_src

* Dude, Where's My Keybind? (Which-Key)

#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :config
    (setq which-key-side-window-location 'bottom
      which-key-sort-order #'which-key-key-order-alpha
      which-key-sort-uppercase-first nil
      which-key-add-column-padding 1
      which-key-max-display-columns nil
      which-key-min-display-lines 6
      which-key-side-windlow-slot -10
      which-key-side-window-max-height 0.25
      which-key-idle-delay 0.8
      which-key-separator " âž” "
      which-key-allow-imprecise-window-fit t))
#+end_src


* GUI Tweaks
** Fonts
*** Setting the Font Face

    #+begin_src emacs-lisp
      (set-face-attribute 'default nil
        :font "0xProto Nerd Font Mono"
        :height 110
        :weight 'medium)
    #+end_src

** Disable Menubar, Toolbars, and Scrollbars

  #+begin_src emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
  #+end_src

** Enable Line Numbers and Truncated Lines

  #+begin_src emacs-lisp
    (global-display-line-numbers-mode 1)
    (global-visual-line-mode 1)
  #+end_src
  
** All The Icons

  #+begin_src emacs-lisp
    (use-package all-the-icons
      :ensure t
      :if (display-graphic-p))
    
    (use-package all-the-icons-dired 
      :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
  #+end_src

** Render Hex Colors Inline 
 
 #+begin_src emacs-lisp
   (use-package rainbow-mode
     :hook org-mode prog-mode)
 #+end_src
 
** Theming
  #+begin_src emacs-lisp
    (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
    (load-theme 'magonyx t)
  #+end_src
  
* Ivy and Counsel
 Ivy is a generic completion frontend for Emacs. Counsel is a collection of ivy-enhanced, common Emacs commands.
 Ivy-rich allows us to add descriptions alongside the commands in M-x.
 
 #+begin_src emacs-lisp
   (use-package counsel
     :after ivy
     :config (counsel-mode))

   (use-package ivy
     :custom
       (setq ivy-use-virtual-buffers t)
       (setq ivy-count-format "(%d/%d) ")
       (setq enable-recursive-minibuffers t)
     :config
       (ivy-mode))

   (use-package all-the-icons-ivy-rich
     :ensure t
     :init (all-the-icons-ivy-rich-mode 1))  

   (use-package ivy-rich
     :after ivy
     :ensure t
     :init (ivy-rich-mode 1)
     :custom
       (ivy-virtual-abbreviate 'full
	 ivy-rich-switch-buffer-align-virtual-buffer t
	 ivy-rich-path-style 'abbrev)
     :config
       (ivy-set-display-transformer 'ivy-switch-buffer
				    'ivy-rich-switch-buffer-transformer))

 #+end_src

* Org Mode
** Table of Contents

  #+begin_src emacs-lisp
    (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
  #+end_src 

** Org Bullets

  #+begin_src emacs-lisp
    (add-hook 'org-mood-hook 'org-indent-mode)
    (use-package org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  #+end_src 

** Disable Electric Indent
 Org mode source blocks have some really weird and annoying default indentation behavior. Let's fix that:

 #+begin_src emacs-lisp
   (electric-indent-mode -1)
 #+end_src
 
** Enable Org Tempo
 This allows you to open source blocks in Org mode using "<sTAB" (among other functionality).
 
 #+begin_src emacs-lisp
   (require 'org-tempo)
 #+end_src
 
| Typing the below + TAB   | Expands to ...                            |
| ------------------------ + ----------------------------------------- |
| <a                       | '#+BEGIN_EXPORT ascii' ... '#+END_EXPORT  |
| <c                       | '#+BEGIN_CENTER' ... '#+END_CENTER'       |
| <C                       | '#+BEGIN_COMMENT' ... '#+END_COMMENT'     |
| <e                       | '#+BEGIN_EXAMPLE' ... '#+END_EXAMPLE'     |
| <E                       | '#+BEGIN_EXPORT' ... '#+END_EXPORT'       |
| <h                       | '#+BEGIN_EXPORT' html ... '#+END_EXPORT'  |
| <l                       | '#+BEGIN_EXPORT' latex ... '#+END_EXPORT' |
| <q                       | '#+BEGIN_QUOTE' ... '#+END_QUOTE'         |
| <s                       | '#+BEGIN_SRC' ... '#+END_SRC'             |
| <v                       | '#+BEGIN_VERSE' ... '#+END_VERSE'         |

